/**
 * Identifies the format of the module to be compiled
 */
export declare enum ModuleType {
    CJS = 0,
    ESM = 1
}
/**
 * Type to specify plugin file details
 */
export interface PluginFile {
    path: string;
    name: string;
}
/**
 * Definition to be used for plugin registration during bootstrap
 */
export interface PluginDefinition {
    /**
     * destination path to compile plugins to
     */
    distPath: string;
    /**
     * source path for where the plugins are defined
     */
    rootPath: string;
    /**
     * CJS or ESM - which type to compile plugins to
     */
    moduleType: ModuleType;
    /**
     * whether to use relative or absolute paths in the generated file. By default, absolute paths are used.
     */
    relative?: boolean;
    /**
     * whether to suppress console output
     */
    silent?: boolean;
}
/**
 * Get list of plugins from @var path
 * Returns a list of plugins in the following format:
 * {
 *   path: 'path/to/plugin/foo',
 *   name: 'fooPlugin'
 * }
 * @example getPluginList('src/foo/plugins', 'Foo')
 * @param {object} definition plugin definition
 * @param {string} definition.path path to get plugin from
 * @param {string} definition.pluginName plugin name
 * @param {boolean} [definition.silent] whether to suppress console output
 */
export declare function getPluginList({ path, pluginName, silent, }: {
    path: string;
    pluginName: string;
    silent?: boolean;
}): PluginFile[];
/**
 * Generates the plugins file and saves it to the filesystem.
 * By convention, we expect to find plugins under {pluginName}/plugins/** (subfolders are searched recursively).
 * generated file will be saved to @var {distPath} and will contain a list of plugins in the following format:
 * CJS: exports.fooPlugin = require('{pluginPath}');
 * ESM: export { fooPlugin } from '{pluginPath}';
 * @example generatePlugins({ distPath: 'src/temp/foo-plugins.js', rootPath: 'src/foo/plugins', moduleType: ModuleType.CJS })
 * @param {PluginDefinition} definition plugin definition
 */
export declare function generatePlugins(definition: PluginDefinition): void;
