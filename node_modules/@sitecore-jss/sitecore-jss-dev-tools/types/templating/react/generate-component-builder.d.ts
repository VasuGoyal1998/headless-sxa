import { ComponentFile, PackageDefinition } from '../components';
/**
 * Generate component builder based on provided settings
 * @param {object} settings settings for component builder generation
 * @param {string} settings.componentRootPath path to components root
 * @param {PackageDefinition[]} [settings.packages] list of packages to include in component builder
 * @param {ComponentFile[]} [settings.components] list of components to include in component builder
 * @param {boolean} settings.watch whether to watch for changes to component builder sources
 */
export declare function generateComponentBuilder({ componentRootPath, packages, components, watch, }: {
    componentRootPath?: string;
    packages?: PackageDefinition[];
    components?: ComponentFile[];
    watch?: boolean;
}): void;
/**
 * Watch for changes to component builder sources
 * @param {object} config configuration for component builder watcher
 * @param {string} config.componentRootPath root path to components
 * @param {PackageDefinition[]} config.packages packages to include in component builder
 * @param {ComponentFile[]} config.components components to include in component builder
 */
export declare function watchComponentBuilder({ componentRootPath, packages, components, }: {
    componentRootPath: string;
    packages: PackageDefinition[];
    components: ComponentFile[];
}): void;
/**
 * Write component builder to file
 * @param {object} settings settings for component builder generation
 * @param {string} settings.componentRootPath root path to components
 * @param {PackageDefinition[]} settings.packages packages to include in component builder
 * @param {ComponentFile[]} settings.components list of components to include in component builder
 */
export declare function writeComponentBuilder({ componentRootPath, packages, components, }: {
    componentRootPath: string;
    packages: PackageDefinition[];
    components: ComponentFile[];
}): void;
