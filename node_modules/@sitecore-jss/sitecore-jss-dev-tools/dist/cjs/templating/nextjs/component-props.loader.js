"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = componentPropsLoader;
const recast = __importStar(require("recast"));
/**
 * Webpack loader to strip functions from the source code
 * Strips the `getServerSideProps` and `getStaticProps` functions from the source code
 * @param {string} source file source code
 * @returns {string} output file source code with stripped functions
 */
function componentPropsLoader(source) {
    // Parse the source code into an AST (Abstract Syntax Tree)
    const ast = recast.parse(source, {
        parser: require('recast/parsers/babel-ts'),
    });
    // List of functions to strip from the AST
    const functionsToStrip = ['getServerSideProps', 'getStaticProps'];
    // Remove the function from the list of functions to strip
    const updateList = (functionName) => {
        // Remove the function from the list of functions to strip
        functionsToStrip.splice(functionsToStrip.indexOf(functionName), 1);
    };
    // Traverse the AST and strip the functions
    recast.visit(ast, {
        // Visit the named export function expression
        visitExportNamedDeclaration: function (path) {
            var _a, _b;
            // Get the variable declaration from the AST
            (_b = (_a = path.node.declaration) === null || _a === void 0 ? void 0 : _a.declarations) === null || _b === void 0 ? void 0 : _b.forEach((declaration) => {
                // Check if the function is in the list of functions to strip
                if ('id' in declaration &&
                    'name' in declaration.id &&
                    typeof declaration.id.name === 'string' &&
                    functionsToStrip.includes(declaration.id.name)) {
                    updateList(declaration.id.name);
                    // Strip the function from the AST
                    path.prune();
                }
            });
            if (functionsToStrip.length === 0) {
                // We have pruned all the functions we need to, so we can stop traversing the AST
                return false;
            }
            // Continue traversing the AST
            this.traverse(path);
        },
        // Visit the named export function declaration
        visitFunctionDeclaration: function (path) {
            // Check if the function is in the list of functions to strip
            if (path.node.id &&
                'name' in path.node.id &&
                typeof path.node.id.name === 'string' &&
                functionsToStrip.includes(path.node.id.name)) {
                updateList(path.node.id.name);
                // Strip the function from the AST
                path.prune();
            }
            if (functionsToStrip.length === 0) {
                // We have pruned all the functions we need to, so we can stop traversing the AST
                return false;
            }
            // Continue traversing the AST
            this.traverse(path);
        },
    });
    // Generate the output code
    return recast.print(ast).code;
}
