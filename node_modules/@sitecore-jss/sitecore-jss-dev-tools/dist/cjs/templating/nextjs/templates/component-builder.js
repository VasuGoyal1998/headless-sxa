"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getComponentBuilderTemplate = void 0;
const isLazyLoadingModule = (componentPath) => componentPath.includes('.dynamic');
const removeDynamicModuleNameEnding = (moduleName) => moduleName.replace(/\.?dynamic$/i, '');
/**
 * Generate component builder template
 * @param {(PackageDefinition | ComponentFile)[]} components components to include in component builder
 * @returns generated component builder template
 */
const getComponentBuilderTemplate = (components) => {
    const componentFiles = components.filter((component) => component.componentName);
    const packages = components.filter((component) => component.components);
    const hasLazyModules = componentFiles.find((component) => isLazyLoadingModule(component.path));
    return `/* eslint-disable */
// Do not edit this file, it is auto-generated at build time!
// See scripts/generate-component-builder/index.ts to modify the generation of this file.

${hasLazyModules ? "import dynamic from 'next/dynamic';" : ''}
import { ComponentBuilder } from '@sitecore-jss/sitecore-jss-nextjs';

${packages
        .map((pkg) => {
        const list = pkg.components.map((c) => c.moduleName).join(', ');
        return `import { ${list} } from '${pkg.name}';\n`;
    })
        .join('')}
${componentFiles
        .map((component) => {
        if (isLazyLoadingModule(component.path)) {
            const moduleName = removeDynamicModuleNameEnding(component.moduleName);
            return `const ${moduleName} = {
  module: () => import('${component.path}'),
  element: (isEditing?: boolean) => isEditing ? require('${component.path}')?.default : dynamic(${moduleName}.module)
}`;
        }
        return `import * as ${component.moduleName} from '${component.path}';`;
    })
        .join('\n')}

export const components = new Map();
${packages
        .map((p) => p.components.map((component) => `components.set('${component.componentName}', ${component.moduleName});\n`))
        .flat()
        .join('')}
${componentFiles
        .map((component) => `components.set('${isLazyLoadingModule(component.path)
        ? removeDynamicModuleNameEnding(component.componentName)
        : component.componentName}', ${isLazyLoadingModule(component.path)
        ? removeDynamicModuleNameEnding(component.moduleName)
        : component.moduleName});`)
        .join('\n')}

export const componentBuilder = new ComponentBuilder({ components });

export const moduleFactory = componentBuilder.getModuleFactory();
`;
};
exports.getComponentBuilderTemplate = getComponentBuilderTemplate;
