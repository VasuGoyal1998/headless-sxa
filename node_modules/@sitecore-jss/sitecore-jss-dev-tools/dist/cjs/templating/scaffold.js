"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.editLineEndings = editLineEndings;
exports.scaffoldFile = scaffoldFile;
const fs_1 = __importDefault(require("fs"));
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
/**
 * Force to use `crlf` line endings, we are using `crlf` across the project.
 * Replace: `lf` (\n), `cr` (\r)
 * @param {string} content
 */
function editLineEndings(content) {
    return content.replace(/\r|\n/gm, '\r\n');
}
/**
 * Creates a file relative to the specified path if the file doesn't exist.
 * Creates directories as needed.
 * Does not overwrite existing files.
 * @param {string} filePath - the file path
 * @param {string} fileContent - the file content
 * @returns {string} the file path if the file was created, otherwise null
 */
function scaffoldFile(filePath, fileContent) {
    const outputDir = path_1.default.dirname(filePath);
    if (fs_1.default.existsSync(filePath)) {
        console.log(chalk_1.default.red(`Skipping creating ${filePath}; already exists.`));
        return null;
    }
    fs_1.default.mkdirSync(outputDir, { recursive: true });
    fs_1.default.writeFileSync(filePath, editLineEndings(fileContent), 'utf8');
    console.log(chalk_1.default.green(`File ${filePath} has been scaffolded.`));
    return filePath;
}
