"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getItems = getItems;
exports.watchItems = watchItems;
const fs_1 = __importDefault(require("fs"));
const chokidar_1 = __importDefault(require("chokidar"));
/**
 * Using @var path find all files and generate output using @var resolveItem function for each file
 * Can be used to generate list of components, templates, etc.
 * @param {GetItemsSettings} settings
 * @returns {Item[]} list of items
 */
function getItems(settings) {
    const { recursive = true, path, resolveItem, cb, fileFormat = new RegExp(/(.+)(?<!\.d)\.[jt]sx?$/), } = settings;
    const items = [];
    const folders = [];
    if (!fs_1.default.existsSync(path))
        return [];
    fs_1.default.readdirSync(path, { withFileTypes: true }).forEach((item) => {
        if (item.isDirectory()) {
            folders.push(item);
        }
        if (fileFormat.test(item.name)) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const name = item.name.match(fileFormat)[1];
            items.push(resolveItem(path, name));
            cb && cb(name);
        }
    });
    for (const folder of folders) {
        recursive
            ? items.push(...getItems({
                path: `${path}/${folder.name}`,
                resolveItem,
                cb,
                fileFormat,
            }))
            : items.push(resolveItem(`${path}/${folder.name}`, folder.name));
    }
    return items;
}
/**
 * Run watch mode, watching on @var paths
 * @param {string[]} paths paths to watch by chokidar
 * @param {Function<void>} cb callback to run on file change
 */
function watchItems(paths, cb) {
    chokidar_1.default
        .watch(paths, { ignoreInitial: true, awaitWriteFinish: true })
        .on('add', cb)
        .on('unlink', cb);
}
