"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getComponentBuilderTemplate = void 0;
const path_1 = __importDefault(require("path"));
/**
 * Generate component builder template
 * @param {(PackageDefinition | ComponentFile)[]} components components to include in component builder
 * @param {string} distPath destination path for component builder
 * @returns generated component builder template
 */
const getComponentBuilderTemplate = (components, distPath) => {
    const componentFiles = components.filter((component) => component.componentName);
    const packages = components.filter((component) => component.components);
    return `/* eslint-disable */
// Do not edit this file, it is auto-generated at build time!
// See scripts/generate-component-builder/index.js to modify the generation of this file.

import { ComponentBuilder } from '@sitecore-jss/sitecore-jss-react';
${packages
        .map((pkg) => {
        const list = pkg.components.map((c) => c.moduleName).join(', ');
        return `import { ${list} } from '${pkg.name}';\n`;
    })
        .join('')}
${componentFiles
        .map((component) => {
        const sourcePath = path_1.default.relative(path_1.default.dirname(distPath), component.path).replace(/\\/g, '/');
        return `import ${component.moduleName} from '${sourcePath}';`;
    })
        .join('\n')}

const components = new Map();
${packages
        .map((p) => p.components.map((component) => `components.set('${component.componentName}', ${component.moduleName});\n`))
        .flat()
        .join('')}
${componentFiles
        .map((component) => `components.set('${component.componentName}', ${component.moduleName});`)
        .join('\n')}

const componentBuilder = new ComponentBuilder({ components });

export const componentFactory = componentBuilder.getComponentFactory();
`;
};
exports.getComponentBuilderTemplate = getComponentBuilderTemplate;
