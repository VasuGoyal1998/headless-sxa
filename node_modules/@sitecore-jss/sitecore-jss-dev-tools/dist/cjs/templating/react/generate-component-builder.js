"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateComponentBuilder = generateComponentBuilder;
exports.watchComponentBuilder = watchComponentBuilder;
exports.writeComponentBuilder = writeComponentBuilder;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const component_builder_1 = require("./templates/component-builder");
const components_1 = require("../components");
const utils_1 = require("../utils");
// Default destination path for component builder
const componentBuilderOutputPath = 'src/temp/componentBuilder.js';
const defaultComponentRootPath = 'src/components';
/**
 * Generate component builder based on provided settings
 * @param {object} settings settings for component builder generation
 * @param {string} settings.componentRootPath path to components root
 * @param {PackageDefinition[]} [settings.packages] list of packages to include in component builder
 * @param {ComponentFile[]} [settings.components] list of components to include in component builder
 * @param {boolean} settings.watch whether to watch for changes to component builder sources
 */
function generateComponentBuilder({ componentRootPath = defaultComponentRootPath, packages = [], components = [], watch, }) {
    if (watch) {
        watchComponentBuilder({ componentRootPath, packages, components });
    }
    else {
        writeComponentBuilder({ componentRootPath, packages, components });
    }
}
/**
 * Watch for changes to component builder sources
 * @param {object} config configuration for component builder watcher
 * @param {string} config.componentRootPath root path to components
 * @param {PackageDefinition[]} config.packages packages to include in component builder
 * @param {ComponentFile[]} config.components components to include in component builder
 */
function watchComponentBuilder({ componentRootPath, packages, components, }) {
    console.log(`Watching for changes to component builder sources in ${componentRootPath}...`);
    (0, utils_1.watchItems)([componentRootPath], writeComponentBuilder.bind(null, { componentRootPath, packages, components }));
}
/**
 * Write component builder to file
 * @param {object} settings settings for component builder generation
 * @param {string} settings.componentRootPath root path to components
 * @param {PackageDefinition[]} settings.packages packages to include in component builder
 * @param {ComponentFile[]} settings.components list of components to include in component builder
 */
function writeComponentBuilder({ componentRootPath, packages, components, }) {
    const items = [
        ...packages,
        ...components,
        ...(0, components_1.getComponentList)(componentRootPath),
    ];
    const componentBuilderPath = path_1.default.resolve(componentBuilderOutputPath);
    const fileContent = (0, component_builder_1.getComponentBuilderTemplate)(items, componentBuilderPath);
    console.log(`Writing component builder to ${componentBuilderPath}`);
    fs_1.default.writeFileSync(componentBuilderPath, fileContent, {
        encoding: 'utf8',
    });
}
