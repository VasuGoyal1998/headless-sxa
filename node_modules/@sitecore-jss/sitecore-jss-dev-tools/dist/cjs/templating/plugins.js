"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleType = void 0;
exports.getPluginList = getPluginList;
exports.generatePlugins = generatePlugins;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
/**
 * Identifies the format of the module to be compiled
 */
var ModuleType;
(function (ModuleType) {
    ModuleType[ModuleType["CJS"] = 0] = "CJS";
    ModuleType[ModuleType["ESM"] = 1] = "ESM";
})(ModuleType || (exports.ModuleType = ModuleType = {}));
/**
 * Get list of plugins from @var path
 * Returns a list of plugins in the following format:
 * {
 *   path: 'path/to/plugin/foo',
 *   name: 'fooPlugin'
 * }
 * @example getPluginList('src/foo/plugins', 'Foo')
 * @param {object} definition plugin definition
 * @param {string} definition.path path to get plugin from
 * @param {string} definition.pluginName plugin name
 * @param {boolean} [definition.silent] whether to suppress console output
 */
function getPluginList({ path, pluginName, silent = false, }) {
    const plugins = (0, utils_1.getItems)({
        path,
        resolveItem: (path, name) => ({
            path: `${path}/${name}`,
            name: `${name.replace(/-./g, (x) => x[1].toUpperCase())}Plugin`,
        }),
        cb: (name) => !silent && console.debug(`Registering ${pluginName} plugin ${name}`),
    });
    return plugins;
}
/**
 * Generates the plugins file and saves it to the filesystem.
 * By convention, we expect to find plugins under {pluginName}/plugins/** (subfolders are searched recursively).
 * generated file will be saved to @var {distPath} and will contain a list of plugins in the following format:
 * CJS: exports.fooPlugin = require('{pluginPath}');
 * ESM: export { fooPlugin } from '{pluginPath}';
 * @example generatePlugins({ distPath: 'src/temp/foo-plugins.js', rootPath: 'src/foo/plugins', moduleType: ModuleType.CJS })
 * @param {PluginDefinition} definition plugin definition
 */
function generatePlugins(definition) {
    const { rootPath, distPath, moduleType, relative = false, silent } = definition;
    const segments = rootPath.split('/');
    const pluginName = segments[segments.length - 2];
    const plugins = getPluginList({ path: rootPath, pluginName, silent });
    let fileContent = '';
    fileContent = plugins
        .map((plugin) => {
        const sourcePath = relative
            ? path_1.default.relative(path_1.default.dirname(distPath), plugin.path).replace(/\\/g, '/')
            : plugin.path;
        return moduleType === ModuleType.CJS
            ? `exports.${plugin.name} = require('${sourcePath}');`
            : `export { ${plugin.name} } from '${sourcePath}';`;
    })
        .join('\r\n')
        .concat('\r\n');
    if (!plugins.length) {
        fileContent = moduleType === ModuleType.CJS ? 'module.exports = {};\r\n' : 'export {};\r\n';
    }
    const filePath = path_1.default.resolve(distPath);
    !silent && console.log(`Writing ${pluginName} plugins to ${filePath}`);
    fs_1.default.writeFileSync(filePath, fileContent, {
        encoding: 'utf8',
    });
}
