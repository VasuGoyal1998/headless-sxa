"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initCompilers = exports.importModules = exports.resolveFiles = void 0;
const fs_1 = require("fs");
const glob_1 = require("glob");
const nodePath = __importStar(require("path"));
// inspired by 'lookupFiles' method: https://github.com/mochajs/mocha/blob/master/lib/utils.js
const resolveFiles = ({ fileGlob, extensions, recursive, workingDirectory, allowEmptyGlobs = false, }) => {
    let files = [];
    let lookupPath = fileGlob;
    const re = new RegExp(`\\.(${extensions.join('|')})$`);
    if (!(0, fs_1.existsSync)(lookupPath)) {
        if ((0, fs_1.existsSync)(`${lookupPath}.js`)) {
            lookupPath += '.js';
        }
        if ((0, fs_1.existsSync)(`${lookupPath}.ts`)) {
            lookupPath += '.ts';
        }
        else {
            const options = {};
            if (workingDirectory) {
                options.cwd = workingDirectory;
            }
            files = (0, glob_1.sync)(lookupPath, options);
            if (!files.length) {
                if (allowEmptyGlobs) {
                    console.warn(`path or pattern '${lookupPath}' did not match any files.`);
                }
                else {
                    throw new Error(`cannot resolve path (or pattern) '${lookupPath}'`);
                }
            }
            return files;
        }
    }
    try {
        const stat = (0, fs_1.statSync)(lookupPath);
        if (stat.isFile()) {
            return lookupPath;
        }
    }
    catch (err) {
        // ignore error
        return [];
    }
    (0, fs_1.readdirSync)(lookupPath).forEach((file) => {
        const filePath = nodePath.join(lookupPath, file);
        let stat;
        try {
            stat = (0, fs_1.statSync)(filePath);
            if (stat.isDirectory()) {
                if (recursive) {
                    files = files.concat((0, exports.resolveFiles)({ fileGlob: filePath, extensions, recursive, workingDirectory }));
                }
                return;
            }
        }
        catch (err) {
            // ignore error
            return;
        }
        if (!stat.isFile() || !re.test(filePath) || nodePath.basename(filePath)[0] === '.') {
            return;
        }
        const resolvedPath = nodePath.resolve(filePath);
        files.push(resolvedPath);
    });
    return files;
};
exports.resolveFiles = resolveFiles;
const importModules = ({ fileGlobs = [], workingDirectory = '', allowEmptyGlobs = false, }) => {
    const resolved = fileGlobs.reduce((initialResult, fileGlob) => {
        let result = initialResult;
        if (fileGlob) {
            result = result.concat((0, exports.resolveFiles)({
                fileGlob,
                extensions: ['.js'],
                recursive: true,
                workingDirectory,
                allowEmptyGlobs,
            }));
        }
        return result;
    }, []);
    // wrap import() in a function so we can control when the promise starts to resolve.
    // otherwise, promises start to resolve immediately upon creation.
    const modules = resolved.map((file) => ({
        file,
        import: () => Promise.resolve(`${nodePath.resolve(workingDirectory, file)}`).then(s => __importStar(require(s))),
    }));
    return modules;
};
exports.importModules = importModules;
const initCompilers = (...args_1) => __awaiter(void 0, [...args_1], void 0, function* (compilers = []) {
    if (!compilers || compilers.length === 0) {
        console.warn('no compilers specified for initCompilers');
        return Promise.resolve();
    }
    const imports = [];
    // eslint-disable-next-line no-restricted-syntax
    for (const compiler of compilers) {
        // not entirely sure why this works... i assume we would need to call .then() after import() and subsequently
        // call the default export of the imported module (assuming it's a function).
        // probably compiler-specific, depending on how they export, something to be aware
        // of if people use something other than `babel-core/register`.
        imports.push(Promise.resolve(`${compiler}`).then(s => __importStar(require(s))));
    }
    return Promise.all(imports);
});
exports.initCompilers = initCompilers;
