import { IncomingMessage, ServerResponse } from 'http';
import { LayoutServiceBase } from './layout-service';
import { PlaceholderData, LayoutServiceData } from './models';
import { NativeDataFetcherFunction, NativeDataFetcherResponse } from '../native-fetcher';
import { HttpDataFetcher } from '../data-fetcher';
interface FetchParams {
    [param: string]: string | number | boolean;
    sc_apikey: string;
    sc_site: string;
    sc_lang: string;
    tracking: boolean;
}
export type RestLayoutServiceConfig = {
    /**
     * Your Sitecore instance hostname that is the backend for JSS
     */
    apiHost: string;
    /**
     * The Sitecore SSC API key your app uses
     */
    apiKey: string;
    /**
     * The JSS application name
     */
    siteName: string;
    /**
     * Enables/disables analytics tracking for the Layout Service invocation (default is true).
     * More than likely, this would be set to false for SSG/hybrid implementations, and the
     * JSS tracker would instead be used on the client-side: {@link https://jss.sitecore.com/docs/fundamentals/services/tracking}
     * @default true
     */
    tracking?: boolean;
    /**
     * Function that handles fetching API data
     */
    dataFetcherResolver?: DataFetcherResolver;
    /**
     * Layout Service "named" configuration
     */
    configurationName?: string;
};
/**
 * Data fetcher resolver in order to provide custom data fetcher
 * @param {IncomingMessage} [req] Request instance
 * @param {ServerResponse} [res] Response instance
 */
export type DataFetcherResolver = <T>(req?: IncomingMessage, res?: ServerResponse) => HttpDataFetcher<T> | NativeDataFetcherFunction<T>;
/**
 * Fetch layout data using the Sitecore Layout Service REST API.
 * Uses NativeDataFetcher as the default data fetcher (@see NativeDataFetcher).
 * @augments LayoutServiceBase
 */
export declare class RestLayoutService extends LayoutServiceBase {
    private serviceConfig;
    constructor(serviceConfig: RestLayoutServiceConfig);
    /**
     * Fetch layout data for an item.
     * @param {string} itemPath item path to fetch layout data for.
     * @param {string} [language] the language to fetch layout data for.
     * @param {IncomingMessage} [req] Request instance
     * @param {ServerResponse} [res] Response instance
     * @returns {Promise<LayoutServiceData>} layout service data
     * @throws {Error} the item with the specified path is not found
     */
    fetchLayoutData(itemPath: string, language?: string, req?: IncomingMessage, res?: ServerResponse): Promise<LayoutServiceData>;
    /**
     * Fetch layout data for a particular placeholder.
     * Makes a request to Sitecore Layout Service for the specified placeholder in
     * a specific route item. Allows you to retrieve rendered data for individual placeholders instead of entire routes.
     * @param {string} placeholderName the name of the placeholder to fetch layout data for.
     * @param {string} itemPath the path to the item to fetch layout data for.
     * @param {string} [language] the language to fetch data for.
     * @param {IncomingMessage} [req] Request instance
     * @param {ServerResponse} [res] Response instance
     * @returns {Promise<PlaceholderData>} placeholder data
     */
    fetchPlaceholderData(placeholderName: string, itemPath: string, language?: string, req?: IncomingMessage, res?: ServerResponse): Promise<PlaceholderData>;
    /**
     * Provides fetch options in order to fetch data
     * @param {string} [language] language will be applied to `sc_lang` param
     * @returns {FetchOptions} fetch options
     */
    protected getFetchParams: (language?: string) => FetchParams;
    /**
     * Resolves layout service url
     * @param {string} apiType which layout service API to call ('render' or 'placeholder')
     * @returns the layout service url
     */
    protected resolveLayoutServiceUrl(apiType: 'render' | 'placeholder'): string;
    /**
     * Returns a fetcher function pre-configured with headers from the incoming request.
     * Provides default @see NativeDataFetcher data fetcher
     * @param {IncomingMessage} [req] Request instance
     * @param {ServerResponse} [res] Response instance
     * @returns default fetcher
     */
    protected getDefaultFetcher: <T>(req?: IncomingMessage, res?: ServerResponse) => (url: string, data?: RequestInit) => Promise<NativeDataFetcherResponse<T>>;
    /**
     * Creates an HTTP `Headers` object populated with headers from the incoming request.
     * @param {IncomingMessage} [req] - The incoming HTTP request, used to extract headers.
     * @returns {Headers} - An instance of the `Headers` object populated with the extracted headers.
     */
    protected setupReqHeaders(req?: IncomingMessage): Headers;
    /**
     * Setup response headers based on response from layout service
     * @param {ServerResponse} res Response instance
     * @param {NativeDataFetcherResponse<T>} serverRes
     * @returns {NativeDataFetcherResponse} response
     */
    protected setupResHeaders<T>(res: ServerResponse, serverRes: NativeDataFetcherResponse<T>): NativeDataFetcherResponse<T>;
}
export {};
