import { IncomingMessage, OutgoingMessage } from 'http';
import { ParsedUrlQueryInput } from 'querystring';
/**
 * Omit properties from T that are in K. This is a simplified version of TypeScript's built-in `Omit` utility type.
 * Since default `Omit` doesn't support indexing types, we had to introduce this custom implementation.
 */
export type EnhancedOmit<T, K extends PropertyKey> = {
    [P in keyof T as Exclude<P, K>]: T[P];
};
/**
 * Resolves a base URL that may contain query string parameters and an additional set of query
 * string parameters into a unified string representation.
 * @param {string} urlBase the base URL that may contain query string parameters
 * @param {ParsedUrlQueryInput} params query string parameters
 * @returns a URL string
 * @throws {RangeError} if the provided url is an empty string
 */
export declare function resolveUrl(urlBase: string, params?: ParsedUrlQueryInput): string;
export declare const isAbsoluteUrl: (url: string) => boolean;
/**
 * Indicates whether the error is a timeout error
 * @param {unknown} error error
 * @returns {boolean} is timeout error
 */
export declare const isTimeoutError: (error: unknown) => boolean;
/**
 * Gets allowed origins from JSS_ALLOWED_ORIGINS env variable
 * @returns {string[]} list of allowed origins from JSS_ALLOWED_ORIGINS env variable
 */
export declare const getAllowedOriginsFromEnv: () => string[];
/**
 * Tests origin from incoming request against allowed origins list that can be
 * set in JSS's JSS_ALLOWED_ORIGINS env variable, passed via allowedOrigins param and/or
 * be already set in Access-Control-Allow-Origin by other logic.
 * Applies Access-Control-Allow-Origin and Access-Control-Allow-Methods on match
 * Also applies Access-Control-Allow-Headers for preflight requests
 * @param {IncomingMessage} req incoming request
 * @param {OutgoingMessage} res response to set CORS headers for
 * @param {string[]} [allowedOrigins] additional list of origins to test against
 * @returns true if incoming origin matches the allowed lists, false when it does not
 */
export declare const enforceCors: (req: IncomingMessage, res: OutgoingMessage, allowedOrigins?: string[]) => boolean;
/**
 * Determines whether the given input is a regular expression or resembles a URL.
 * @param {string} input - The input string to evaluate.
 * @returns {'regex' | 'url'} - Returns 'url' if the input looks like a URL, otherwise 'regex'.
 */
export declare const isRegexOrUrl: (input: string) => "regex" | "url";
/**
 * Compares two URLSearchParams objects to determine if they are equal.
 * @param {URLSearchParams} params1 - The first set of URL search parameters.
 * @param {URLSearchParams} params2 - The second set of URL search parameters.
 * @returns {boolean} - Returns true if the parameters are equal, otherwise false.
 */
export declare const areURLSearchParamsEqual: (params1: URLSearchParams, params2: URLSearchParams) => boolean;
/**
 * Escapes non-special "?" characters in a string or regex.
 * - For regular strings, it escapes all unescaped "?" characters by adding a backslash (`\`).
 * - For regex patterns (strings enclosed in `/.../`), it analyzes each "?" to determine if it has special meaning
 *   (e.g., `?` in `(abc)?`, `.*?`, `(?!...)`) or is just a literal character. Only literal "?" characters are escaped.
 * @param {string} input - The input string or regex pattern.
 * @returns {string} - The modified string or regex with non-special "?" characters escaped.
 */
export declare const escapeNonSpecialQuestionMarks: (input: string) => string;
/**
 * Merges two URLSearchParams objects. If both objects contain the same key, the value from the second object overrides the first.
 * @param {URLSearchParams} params1 - The first set of URL search parameters.
 * @param {URLSearchParams} params2 - The second set of URL search parameters.
 * @returns {string} - A string representation of the merged URL search parameters.
 */
export declare const mergeURLSearchParams: (params1: URLSearchParams, params2: URLSearchParams) => string;
