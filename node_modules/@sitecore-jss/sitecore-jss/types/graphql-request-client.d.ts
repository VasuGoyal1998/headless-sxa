import { ClientError } from 'graphql-request';
import { DocumentNode } from 'graphql';
import { Debugger } from './debug';
/**
 * Options for configuring a GraphQL request.
 */
interface RequestOptions {
    headers?: Record<string, string>;
}
/**
 * An interface for GraphQL clients for Sitecore APIs
 */
export interface GraphQLClient {
    /**
     * Execute graphql request
     * @param {string | DocumentNode} query graphql query
     * @param {object} [variables] graphql variables
     * @param {RequestOptions} [options] options for configuring a GraphQL request.
     */
    request<T>(query: string | DocumentNode, variables?: {
        [key: string]: unknown;
    }, options?: RequestOptions): Promise<T>;
}
/**
 * This type represents errors that can occur in a GraphQL client.
 * In cases where an error status was sent back from the server (`!response.ok`), the `response` will be populated with details. In cases where a response was never received, the `code` can be populated with the error code (e.g. Node's 'ECONNRESET', 'ETIMEDOUT', etc).
 */
export type GraphQLClientError = Partial<ClientError> & {
    code?: string;
};
/**
 * Defines the strategy for retrying GraphQL requests based on errors and attempts.
 */
export interface RetryStrategy {
    /**
     * Determines whether a request should be retried based on the given error and attempt count.
     * @param error - The error received from the GraphQL request.
     * @param attempt - The current attempt number.
     * @param retries - The number of retries configured.
     * @returns A boolean indicating whether to retry the request.
     */
    shouldRetry(error: GraphQLClientError, attempt: number, retries: number): boolean;
    /**
     * Calculates the delay (in milliseconds) before the next retry based on the given error and attempt count.
     * @param error - The error received from the GraphQL request.
     * @param attempt - The current attempt number.
     * @returns The delay in milliseconds before the next retry.
     */
    getDelay(error: GraphQLClientError, attempt: number): number;
}
/**
 * Minimum configuration options for classes that implement @see GraphQLClient
 */
export type GraphQLRequestClientConfig = {
    /**
     * The API key to use for authentication. This will be added as an 'sc_apikey' header.
     */
    apiKey?: string;
    /**
     * Override debugger for logging. Uses 'sitecore-jss:http' by default.
     */
    debugger?: Debugger;
    /**
     * Override fetch method. Uses 'graphql-request' library default otherwise ('cross-fetch').
     */
    fetch?: typeof fetch;
    /**
     * GraphQLClient request timeout (in milliseconds).
     */
    timeout?: number;
    /**
     * Number of retries for client. Will use the specified `retryStrategy`.
     */
    retries?: number;
    /**
     * Retry strategy for the client. Uses `DefaultRetryStrategy` by default with exponential
     * back-off factor of 2 for codes 429, 502, 503, 504, 520, 521, 522, 523, 524.
     */
    retryStrategy?: RetryStrategy;
    /**
     * Custom headers to be sent with each request.
     */
    headers?: Record<string, string>;
};
/**
 * A GraphQL Client Factory is a function that accepts configuration and returns an instance of a GraphQLRequestClient.
 * This factory function is used to create and configure GraphQL clients for making GraphQL API requests.
 * @param config - The configuration object that specifies how the GraphQL client should be set up.
 * @returns An instance of a GraphQL Request Client ready to send GraphQL requests.
 */
export type GraphQLRequestClientFactory = (config?: Omit<GraphQLRequestClientConfig, 'apiKey'>) => GraphQLRequestClient;
/**
 * Configuration type for @type GraphQLRequestClientFactory
 */
export type GraphQLRequestClientFactoryConfig = {
    endpoint: string;
    apiKey?: string;
};
/**
 * Represents a default retry strategy for handling retry attempts in case of specific HTTP status codes.
 * This class implements the RetryStrategy interface and provides methods to determine whether a request
 * should be retried and calculates the delay before the next retry attempt.
 */
export declare class DefaultRetryStrategy implements RetryStrategy {
    private statusCodes;
    private errorCodes;
    private factor;
    /**
     * @param {object} options Configurable options for retry mechanism.
     * @param {number[]} [options.statusCodes] HTTP status codes to trigger retries on. Default is [429].
     * @param {string[]} [options.errorCodes] Node error codes to trigger retries. Default is ['ECONNRESET', 'ETIMEDOUT', 'EPROTO'].
     * @param {number} [options.factor] Factor by which the delay increases with each retry attempt. Default is 2.
     */
    constructor(options?: {
        statusCodes?: number[];
        errorCodes?: string[];
        factor?: number;
    });
    shouldRetry(error: GraphQLClientError, attempt: number, retries: number): boolean;
    getDelay(error: GraphQLClientError, attempt: number): number;
}
/**
 * A GraphQL client for Sitecore APIs that uses the 'graphql-request' library.
 * https://github.com/prisma-labs/graphql-request
 */
export declare class GraphQLRequestClient implements GraphQLClient {
    private endpoint;
    private client;
    private headers;
    private debug;
    private abortTimeout?;
    private timeout?;
    private retries;
    private retryStrategy;
    /**
     * Provides ability to execute graphql query using given `endpoint`
     * @param {string} endpoint The Graphql endpoint
     * @param {GraphQLRequestClientConfig} [clientConfig] GraphQL request client configuration.
     */
    constructor(endpoint: string, clientConfig?: GraphQLRequestClientConfig);
    /**
     * Factory method for creating a GraphQLRequestClientFactory.
     * @param {object} config - client configuration options.
     * @param {string} config.endpoint - endpoint
     * @param {string} [config.apiKey] - apikey
     */
    static createClientFactory({ endpoint, apiKey, }: GraphQLRequestClientFactoryConfig): GraphQLRequestClientFactory;
    /**
     * Execute graphql request
     * @param {string | DocumentNode} query graphql query
     * @param {object} [variables] graphql variables
     * @param {RequestOptions} [options] Options for configuring a GraphQL request.
     */
    request<T>(query: string | DocumentNode, variables?: {
        [key: string]: unknown;
    }, options?: RequestOptions): Promise<T>;
}
export {};
