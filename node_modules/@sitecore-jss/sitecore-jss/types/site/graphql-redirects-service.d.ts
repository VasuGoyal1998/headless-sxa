import { GraphQLClient } from '../graphql';
import { CacheOptions, CacheClient } from '../cache-client';
import { GraphQLRequestClientFactory } from '../graphql-request-client';
export declare const REDIRECT_TYPE_301 = "REDIRECT_301";
export declare const REDIRECT_TYPE_302 = "REDIRECT_302";
export declare const REDIRECT_TYPE_SERVER_TRANSFER = "SERVER_TRANSFER";
export type RedirectInfo = {
    pattern: string;
    target: string;
    redirectType: string;
    isQueryStringPreserved: boolean;
    locale: string;
};
export type GraphQLRedirectsServiceConfig = CacheOptions & {
    /**
     * Override fetch method. Uses 'GraphQLRequestClient' default otherwise.
     */
    fetch?: typeof fetch;
    /**
     * A GraphQL Request Client Factory is a function that accepts configuration and returns an instance of a GraphQLRequestClient.
     * This factory function is used to create and configure GraphQL clients for making GraphQL API requests.
     */
    clientFactory: GraphQLRequestClientFactory;
};
/**
 * The schema of data returned in response to redirects array request
 */
export type RedirectsQueryResult = {
    site: {
        siteInfo: {
            redirects: RedirectInfo[];
        } | null;
    };
};
/**
 *  The GraphQLRedirectsService class is used to query the JSS redirects using Graphql endpoint
 */
export declare class GraphQLRedirectsService {
    private options;
    private graphQLClient;
    private cache;
    /**
     * Creates an instance of graphQL redirects service with the provided options
     * @param {GraphQLRedirectsServiceConfig} options instance
     */
    constructor(options: GraphQLRedirectsServiceConfig);
    protected get query(): string;
    /**
     * Fetch an array of redirects from API
     * @param {string} siteName site name
     * @returns Promise<RedirectInfo[]>
     * @throws {Error} if the siteName is empty.
     */
    fetchRedirects(siteName: string): Promise<RedirectInfo[]>;
    /**
     * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default
     * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you
     * want to use something else.
     * @returns {GraphQLClient} implementation
     */
    protected getGraphQLClient(): GraphQLClient;
    /**
     * Gets cache client implementation
     * Override this method if custom cache needs to be used
     * @returns CacheClient instance
     */
    protected getCacheClient(): CacheClient<RedirectsQueryResult>;
}
