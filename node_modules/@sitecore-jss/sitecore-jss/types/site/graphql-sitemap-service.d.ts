import { GraphQLClient } from '../graphql';
import { GraphQLRequestClientFactory } from '../graphql-request-client';
export type GraphQLSitemapXmlServiceConfig = {
    /**
     * The JSS application name
     */
    siteName: string;
    /**
     * A GraphQL Request Client Factory is a function that accepts configuration and returns an instance of a GraphQLRequestClient.
     * This factory function is used to create and configure GraphQL clients for making GraphQL API requests.
     */
    clientFactory: GraphQLRequestClientFactory;
};
/**
 * The schema of data returned in response to sitemaps request
 */
export type SitemapQueryResult = {
    site: {
        siteInfo: {
            sitemap: string[];
        };
    };
};
/**
 * Service that fetch the sitemaps data using Sitecore's GraphQL API.
 */
export declare class GraphQLSitemapXmlService {
    options: GraphQLSitemapXmlServiceConfig;
    private graphQLClient;
    /**
     * Creates an instance of graphQL sitemaps service with the provided options
     * @param {GraphQLSitemapXmlServiceConfig} options instance
     */
    constructor(options: GraphQLSitemapXmlServiceConfig);
    protected get query(): string;
    /**
     * Fetch list of sitemaps for the site
     * @returns {string[]} list of sitemap paths
     * @throws {Error} if the siteName is empty.
     */
    fetchSitemaps(): Promise<string[]>;
    /**
     * Get sitemap file path for sitemap id
     * @param {string} id the sitemap id (can be empty for default 'sitemap.xml' file)
     * @returns {string | undefined} the sitemap file path or undefined if one doesn't exist
     */
    getSitemap(id: string): Promise<string | undefined>;
    /**
     * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default
     * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you
     * want to use something else.
     * @returns {GraphQLClient} implementation
     */
    protected getGraphQLClient(): GraphQLClient;
}
