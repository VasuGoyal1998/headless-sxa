import { GraphQLClient } from '../graphql';
import { CacheClient, CacheOptions } from '../cache-client';
import { GraphQLRequestClientFactory } from '../graphql-request-client';
export type SiteInfo = {
    /**
     * Additional user-defined properties
     */
    [key: string]: unknown;
    /**
     * Site name
     */
    name: string;
    /**
     * Site host name. May include multiple values (separated by '|') and wildcards ('*')
     */
    hostName: string;
    /**
     * Site default language
     */
    language: string;
};
export type GraphQLSiteInfoServiceConfig = CacheOptions & {
    /**
     * common variable for all GraphQL queries
     * it will be used for every type of query to regulate result batch size
     * Optional. How many result items to fetch in each GraphQL call. This is needed for pagination.
     * @default 10
     */
    pageSize?: number;
    /**
     * A GraphQL Request Client Factory is a function that accepts configuration and returns an instance of a GraphQLRequestClient.
     * This factory function is used to create and configure GraphQL clients for making GraphQL API requests.
     */
    clientFactory: GraphQLRequestClientFactory;
};
export type GraphQLSiteInfoResult = {
    name: string;
    hostName: string;
    language: string;
};
export declare class GraphQLSiteInfoService {
    private config;
    private graphQLClient;
    private cache;
    /**
     * Creates an instance of graphQL service to retrieve site configuration list from Sitecore
     * @param {GraphQLSiteInfoServiceConfig} config instance
     */
    constructor(config: GraphQLSiteInfoServiceConfig);
    /**
     * site query is available on XM Cloud and XP 10.4+
     */
    protected get siteQuery(): string;
    fetchSiteInfo(): Promise<SiteInfo[]>;
    protected fetchWithSiteQuery(): Promise<SiteInfo[]>;
    /**
     * Gets cache client implementation
     * Override this method if custom cache needs to be used
     * @returns CacheClient instance
     */
    protected getCacheClient(): CacheClient<SiteInfo[]>;
    /**
     * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default
     * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you
     * want to use something else.
     * @returns {GraphQLClient} implementation
     */
    protected getGraphQLClient(): GraphQLClient;
    private getCacheKey;
}
