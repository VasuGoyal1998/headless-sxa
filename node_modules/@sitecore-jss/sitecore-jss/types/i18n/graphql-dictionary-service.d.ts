import { GraphQLClient, GraphQLRequestClientConfig, GraphQLRequestClientFactory } from '../graphql-request-client';
import { DictionaryPhrases, DictionaryServiceBase } from './dictionary-service';
import { CacheOptions } from '../cache-client';
import { PageInfo, SearchQueryVariables } from '../graphql';
/** @private */
export declare const queryError = "Valid value for rootItemId not provided and failed to auto-resolve app root item.";
/**
 * Configuration options for @see GraphQLDictionaryService instances
 */
export interface GraphQLDictionaryServiceConfig extends Omit<SearchQueryVariables, 'language'>, CacheOptions, Pick<GraphQLRequestClientConfig, 'retries' | 'retryStrategy'> {
    /**
     * The name of the current Sitecore site. This is used to to determine the search query root
     * in cases where one is not specified by the caller.
     */
    siteName: string;
    /**
     * A GraphQL Request Client Factory is a function that accepts configuration and returns an instance of a GraphQLRequestClient.
     * This factory function is used to create and configure GraphQL clients for making GraphQL API requests.
     */
    clientFactory: GraphQLRequestClientFactory;
    /**
     * Optional. The template ID to use when searching for dictionary entries.
     * @default '6d1cd89719364a3aa511289a94c2a7b1' (/sitecore/templates/System/Dictionary/Dictionary entry)
     */
    dictionaryEntryTemplateId?: string;
    /**
     * Optional. The template ID of a JSS App to use when searching for the appRootId.
     * @default '061cba1554744b918a0617903b102b82' (/sitecore/templates/Foundation/JavaScript Services/App)
     */
    jssAppTemplateId?: string;
    /**
     * Optional. Use site query for dictionary fetch instead of search query (XM Cloud only)
     */
    useSiteQuery?: boolean;
}
/**
 * The schema of data returned in response to a dictionary query request.
 */
export type DictionaryQueryResult = {
    key: {
        value: string;
    };
    phrase: {
        value: string;
    };
};
export type DictionarySiteQueryResponse = {
    site: {
        siteInfo: {
            dictionary: {
                results: {
                    key: string;
                    value: string;
                }[];
                pageInfo: PageInfo;
            };
        };
    };
};
/**
 * Service that fetch dictionary data using Sitecore's GraphQL API.
 * @augments DictionaryServiceBase
 * @mixes SearchQueryService<DictionaryQueryResult>
 */
export declare class GraphQLDictionaryService extends DictionaryServiceBase {
    options: GraphQLDictionaryServiceConfig;
    private graphQLClient;
    private searchService;
    /**
     * Creates an instance of graphQL dictionary service with the provided options
     * @param {GraphQLDictionaryService} options instance
     */
    constructor(options: GraphQLDictionaryServiceConfig);
    /**
     * Fetches dictionary data for internalization. Uses search query by default
     * @param {string} language the language to fetch
     * @returns {Promise<DictionaryPhrases>} dictionary phrases
     * @throws {Error} if the app root was not found for the specified site and language.
     */
    fetchDictionaryData(language: string): Promise<DictionaryPhrases>;
    /**
     * Fetches dictionary data with search query
     * This is the default behavior for non-XMCloud deployments. Uses `query` to retrieve data.
     * @param {string} language the language to fetch
     * @returns {Promise<DictionaryPhrases>} dictionary phrases
     * @throws {Error} if the app root was not found for the specified site and language.
     */
    fetchWithSearchQuery(language: string): Promise<DictionaryPhrases>;
    /**
     * Fetches dictionary data with site query
     * This is the default behavior for XMCloud deployments. Uses `siteQuery` to retrieve data.
     * @param {string} language the language to fetch
     * @returns {Promise<DictionaryPhrases>} dictionary phrases
     */
    fetchWithSiteQuery(language: string): Promise<DictionaryPhrases>;
    /**
     * Gets a GraphQL client that can make requests to the API. Uses graphql-request as the default
     * library for fetching graphql data (@see GraphQLRequestClient). Override this method if you
     * want to use something else.
     * @returns {GraphQLClient} implementation
     */
    protected getGraphQLClient(): GraphQLClient;
}
