import { PageInfo } from '../graphql';
import { GraphQLClient, GraphQLRequestClientFactory } from '../graphql-request-client';
import { DictionaryPhrases } from '../i18n';
import { LayoutServiceData } from '../layout';
import { LayoutKind } from './models';
/**
 * GraphQL query for fetching editing data.
 */
export declare const query = "\n query EditingQuery(\n    $siteName: String!\n    $itemId: String!\n    $language: String!\n    $version: String\n    $after: String\n    $pageSize: Int = 1000\n) {\n    item(path: $itemId, language: $language, version: $version) {\n      rendered\n    }\n    site {\n      siteInfo(site: $siteName) {\n        dictionary(language: $language, first: $pageSize, after: $after) {\n          results {\n            key\n            value\n          }\n          pageInfo {\n            endCursor\n            hasNext\n          }\n        }\n      }\n    }\n  }\n";
/**
 * GraphQL query for fetching dictionary data.
 * This query is used when the dictionary data is paginated.
 */
export declare const dictionaryQuery = "\n  query EditingDictionaryQuery(\n    $siteName: String!\n    $language: String!\n    $after: String\n    $pageSize: Int = 1000\n  ) {\n    site {\n      siteInfo(site: $siteName) {\n        dictionary(language: $language, first: $pageSize, after: $after) {\n          results {\n            key\n            value\n          }\n          pageInfo {\n            endCursor\n            hasNext\n          }\n        }\n      }\n    }\n  }\n";
/**
 * Response from the GraphQL Dictionary query.
 */
export type GraphQLDictionaryQueryResponse = {
    site: {
        siteInfo: {
            dictionary: {
                results: {
                    key: string;
                    value: string;
                }[];
                pageInfo: PageInfo;
            };
        };
    };
};
/**
 * Response from the GraphQL Editing query.
 */
export type GraphQLEditingQueryResponse = GraphQLDictionaryQueryResponse & {
    item: {
        rendered: LayoutServiceData;
    };
};
export interface GraphQLEditingServiceConfig {
    /**
     * A GraphQL Request Client Factory is a function that accepts configuration and returns an instance of a GraphQLRequestClient.
     * This factory function is used to create and configure GraphQL clients for making GraphQL API requests.
     */
    clientFactory: GraphQLRequestClientFactory;
}
/**
 * Service for fetching editing data from Sitecore using the Sitecore's GraphQL API.
 * Expected to be used in XMCloud Pages preview (editing) Metadata Edit Mode.
 */
export declare class GraphQLEditingService {
    serviceConfig: GraphQLEditingServiceConfig;
    private graphQLClient;
    /**
     * Fetch layout data using the Sitecore GraphQL endpoint.
     * @param {GraphQLLayoutServiceConfig} serviceConfig configuration
     */
    constructor(serviceConfig: GraphQLEditingServiceConfig);
    /**
     * Fetches editing data. Provides the layout data and dictionary phrases
     * @param {object} variables - The parameters for fetching editing data.
     * @param {string} variables.siteName - The site name.
     * @param {string} variables.itemId - The item id (path) to fetch layout data for.
     * @param {string} variables.language - The language to fetch layout data for.
     * @param {string} [variables.version] - The version of the item (optional).
     * @param {LayoutKind} [variables.layoutKind] - The final or shared layout variant.
     * @returns {Promise} The layout data and dictionary phrases.
     */
    fetchEditingData({ siteName, itemId, language, version, layoutKind, }: {
        siteName: string;
        itemId: string;
        language: string;
        version?: string;
        layoutKind?: LayoutKind;
    }): Promise<{
        layoutData: LayoutServiceData;
        dictionary: DictionaryPhrases;
    }>;
    /**
     * Gets a GraphQL client that can make requests to the API.
     * @returns {GraphQLClient} implementation
     */
    protected getGraphQLClient(): GraphQLClient;
}
