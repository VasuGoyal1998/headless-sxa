/**
 * Default value of uid for root placeholder when uid is not present.
 */
export declare const DEFAULT_PLACEHOLDER_UID = "00000000-0000-0000-0000-000000000000";
/**
 * Query parameter for editing secret
 */
export declare const QUERY_PARAM_EDITING_SECRET = "secret";
/**
 * ID to be used as a marker for a script rendered in XMC Pages
 * Should identify app is in XM Cloud Pages editing mode
 */
export declare const PAGES_EDITING_MARKER = "jss-hrz-editing";
/**
 * Default allowed origins for editing requests. This is used to enforce CORS, CSP headers.
 */
export declare const EDITING_ALLOWED_ORIGINS: string[];
/**
 * Application metadata
 */
export interface Metadata {
    packages: {
        [key: string]: string;
    };
}
/**
 * Static utility class for Sitecore Experience Editor
 */
export declare class ExperienceEditor {
    /**
     * Determines whether the current execution context is within a Experience Editor.
     * Experience Editor environment can be identified only in the browser
     * @returns true if executing within a Experience Editor
     */
    static isActive(): boolean;
    static resetChromes(): void;
}
/**
 * Copy of chrome rediscovery contract from Horizon (chrome-rediscovery.contract.ts)
 */
export declare const ChromeRediscoveryGlobalFunctionName: {
    name: string;
};
/**
 * Static utility class for Sitecore Pages Editor (ex-Horizon)
 */
export declare class HorizonEditor {
    /**
     * Determines whether the current execution context is within a Pages Editor.
     * Pages Editor environment can be identified only in the browser
     * @returns true if executing within a Pages Editor
     */
    static isActive(): boolean;
    static resetChromes(): void;
}
/**
 * Determines whether the current execution context is within a Sitecore editor.
 * Sitecore Editor environment can be identified only in the browser
 * @returns true if executing within a Sitecore editor
 */
export declare const isEditorActive: () => boolean;
/**
 * Resets Sitecore editor "chromes"
 */
export declare const resetEditorChromes: () => void;
/**
 * @description in Experience Editor, anchor tags
 * with both onclick and href attributes will use the href, blocking the onclick from firing.
 * This function makes it so the anchor tags function as intended in the sample when using Experience Editor
 *
 * The Mutation Observer API is used to observe changes to the body, then select all elements with href="#" and an onclick,
 * and replaces the # value with javascript:void(0); which prevents the anchor tag from blocking the onclick event handler.
 * @see Mutation Observer API: https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/MutationObserver
 */
export declare const handleEditorAnchors: () => void;
/**
 * Gets extra JSS clientData scripts to render in XMC Pages in addition to clientData from Pages itself
 * @returns {Record} collection of clientData
 */
export declare const getJssPagesClientData: () => Record<string, Record<string, unknown>>;
