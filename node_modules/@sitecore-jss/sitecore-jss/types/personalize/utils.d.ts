export declare const DEFAULT_VARIANT = "_default";
export declare const VARIANT_PREFIX = "_variantId_";
export type PersonalizedRewriteData = {
    variantId: string;
    componentVariantIds?: string[];
};
/**
 * Get a personalized rewrite path for given pathname
 * @param {string} pathname the pathname
 * @param {string[]} variantIds the variantIds to include in the rewrite
 * @returns {string} the rewrite path
 */
export declare function getPersonalizedRewrite(pathname: string, variantIds: string[]): string;
/**
 * Get personalize data from the rewrite path
 * @param {string} pathname the pathname
 * @returns {PersonalizedRewriteData} the personalize data from the rewrite
 */
export declare function getPersonalizedRewriteData(pathname: string): PersonalizedRewriteData;
/**
 * Parses a list of variantIds and divides into layout and component variants
 * @param {string[]} variantIds the list of variant IDs for a page
 * @returns {PersonalizedRewriteData} object with variant IDs sorted
 */
export declare function getGroomedVariantIds(variantIds: string[]): PersonalizedRewriteData;
/**
 * Normalize a personalized rewrite path (remove personalize data)
 * @param {string} pathname the pathname
 * @returns {string} the pathname with personalize data removed
 */
export declare function normalizePersonalizedRewrite(pathname: string): string;
/**
 * Static utility class for Sitecore CDP
 */
export declare class CdpHelper {
    /**
     * Gets the page variant id for CDP in the required format
     * @param {string} pageId the page id
     * @param {string} language the language
     * @param {string} variantId the variant id
     * @param {string} [scope] the scope value
     * @returns {string} the formatted page variant id
     */
    static getPageVariantId(pageId: string, language: string, variantId: string, scope?: string): string;
    /**
     * Gets the friendly id for (page-level) Embedded Personalization in the required format `embedded_[<scope>_]<id>_<lang>`
     * @param {string} pageId the page id
     * @param {string} language the language
     * @param {string} [scope] the scope value
     * @returns {string} the friendly id
     */
    static getPageFriendlyId(pageId: string, language: string, scope?: string): string;
    /**
     * Gets the friendly id for Component A/B Testing in the required format `component_[<scope>_]<pageId>_<componentId>_<language>*`
     * @param {string} pageId the page id
     * @param {string} componentId the component id
     * @param {string} language the language
     * @param {string} [scope] the scope value
     * @returns {string} the friendly id
     */
    static getComponentFriendlyId(pageId: string, componentId: string, language: string, scope?: string): string;
    /**
     * Normalizes the scope from the given string value
     * Removes all non-alphanumeric characters
     * @param {string} [scope] the scope value
     * @returns {string} normalized scope value
     */
    static normalizeScope(scope?: string): string;
}
