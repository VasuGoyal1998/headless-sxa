import { Debugger } from './debug';
type NativeDataFetcherOptions = {
    /**
     * Override debugger for logging. Uses 'sitecore-jss:http' by default.
     */
    debugger?: Debugger;
    /**
     * Override fetch method. Uses native (or polyfilled) fetch by default.
     */
    fetch?: typeof fetch;
    /**
     * Optional request timeout.
     */
    timeout?: number;
};
/**
 * Response data for an HTTP request sent to an API
 * @template T the type of data model requested
 */
export interface NativeDataFetcherResponse<T> {
    /** HTTP status code of the response (i.e. 200, 404) */
    status: number;
    /** HTTP status text of the response (i.e. 'OK', 'Bad Request') */
    statusText: string;
    /** Response content */
    data: T;
    /** Response headers */
    headers?: HeadersInit;
}
/**
 * Native fetcher error type to include response text and status
 */
export type NativeDataFetcherError = Error & {
    response: NativeDataFetcherResponse<unknown>;
};
/**
 * A function that fetches data from a given URL and returns a `NativeDataFetcherResponse`.
 * @param {string} url The URL to request (can include query string parameters).
 * @param {unknown} [data] Optional data to send with the request (e.g., for POST or PUT requests).
 * @returns {Promise<NativeDataFetcherResponse<T>>} A promise that resolves to a `NativeDataFetcherResponse<T>`,
 */
export type NativeDataFetcherFunction<T> = (url: string, data?: RequestInit) => Promise<NativeDataFetcherResponse<T>>;
export type NativeDataFetcherConfig = NativeDataFetcherOptions & RequestInit;
export declare class NativeDataFetcher {
    protected config: NativeDataFetcherConfig;
    private abortTimeout?;
    constructor(config?: NativeDataFetcherConfig);
    /**
     * Implements a data fetcher.
     * @param {string} url The URL to request (may include query string)
     * @param {RequestInit} [options] Optional fetch options
     * @returns {Promise<NativeDataFetcherResponse<T>>} response
     */
    fetch<T>(url: string, options?: RequestInit): Promise<NativeDataFetcherResponse<T>>;
    /**
     * Perform a GET request
     * @param {string} url The URL to request (may include query string)
     * @param {RequestInit} [options] Fetch options
     * @returns {Promise<NativeDataFetcherResponse<T>>} response
     */
    get<T>(url: string, options?: RequestInit): Promise<NativeDataFetcherResponse<T>>;
    /**
     * Perform a POST request
     * @param {string} url The URL to request (may include query string)
     * @param {unknown} body The data to send with the request
     * @param {RequestInit} [options] Fetch options
     * @returns {Promise<NativeDataFetcherResponse<T>>} response
     */
    post<T>(url: string, body: unknown, options?: RequestInit): Promise<NativeDataFetcherResponse<T>>;
    /**
     * Perform a DELETE request
     * @param {string} url The URL to request (may include query string)
     * @param {RequestInit} [options] Fetch options
     * @returns {Promise<NativeDataFetcherResponse<T>>} response
     */
    delete<T>(url: string, options?: RequestInit): Promise<NativeDataFetcherResponse<T>>;
    /**
     * Perform a PUT request
     * @param {string} url The URL to request (may include query string)
     * @param {unknown} body The data to send with the request
     * @param {RequestInit} [options] Fetch options
     * @returns {Promise<NativeDataFetcherResponse<T>>} response
     */
    put<T>(url: string, body: unknown, options?: RequestInit): Promise<NativeDataFetcherResponse<T>>;
    /**
     * Perform a HEAD request
     * @param {string} url The URL to request (may include query string)
     * @param {RequestInit} [options] Fetch options
     * @returns {Promise<NativeDataFetcherResponse<T>>} response
     */
    head<T>(url: string, options?: RequestInit): Promise<NativeDataFetcherResponse<T>>;
    /**
     * Determines settings for the request
     * @param {RequestInit} init Custom settings for request
     * @returns {RequestInit} The final request settings
     */
    protected getRequestInit(init?: RequestInit): RequestInit;
    /**
     * Safely extract all headers for debug logging
     * @param {HeadersInit} incomingHeaders Incoming headers
     * @returns Object with headers as key/value pairs
     */
    protected extractDebugHeaders(incomingHeaders?: HeadersInit): {
        [key: string]: string | string[];
    };
    /**
     * Parses the response data.
     * @param {Response} response - The fetch response object.
     * @param {Function} debug - The debug logger function.
     * @returns {Promise<unknown>} - The parsed response data.
     */
    private parseResponse;
    /**
     * Creates a custom error for fetch failures.
     * @param {Response} response - The fetch response object.
     * @param {unknown} data - The parsed response data.
     * @returns {NativeDataFetcherError} - The constructed error object.
     */
    private createError;
}
export {};
