"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseError = void 0;
exports.fetchData = fetchData;
const utils_1 = require("./utils/utils");
class ResponseError extends Error {
    constructor(message, response) {
        super(message);
        Object.setPrototypeOf(this, ResponseError.prototype);
        this.response = response;
    }
}
exports.ResponseError = ResponseError;
/**
 * @param {string} url the URL to request; may include query string
 * @param {HttpDataFetcher<T> | NativeDataFetcherFunction<T>} fetcher the fetcher to use to perform the request
 * @param {ParsedUrlQueryInput} params the query string parameters to send with the request
 */
function fetchData(url_1, fetcher_1) {
    return __awaiter(this, arguments, void 0, function* (url, fetcher, params = {}) {
        const response = yield fetcher((0, utils_1.resolveUrl)(url, params));
        return response.data;
    });
}
